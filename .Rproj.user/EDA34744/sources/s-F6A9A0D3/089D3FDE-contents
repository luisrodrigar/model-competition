---
title: "Modelling Competition- Team Beta"
author: "Adson Costanzi, Javier Fong, LA, Javich"
date: "January 16^th^, 2021"
output: 
  html_document:
    code_folding: show
    toc: true
    toc_float: true
    toc_depth: 4
    theme: flatly
---

```{r setup, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(ggplot2)
require(kableExtra)
require(reactable)
require(reactablefmtr)
require(CSGo)
require(readxl)
require(caret)
require(corrplot)

```


# Introduction

The goal of this project is to demonstrate some concepts that we learned in the "Regression Models" course applied to real data. For that purpose we are going to use a data set from **House Prices in King County** provided by the professor. We are going to explore this data set ether descriptively, and also testing some Regression Models to best predict the predict the house prices in King County. 


# About the data

This data set includes 21613 rows one for each combination of id and date (there are 175 ids repited twice and 1 id repited three times) and 21 columns. The data is from 2014-05-02 to 2015-05-14.

* **id**: Identification number of the property (this variable is irrelevant for the analysis)

* **date**: Date house was sold

* **price**: Price (the prediction target)

* **bedrooms**: Number of Bedrooms/House

* **bathrooms**: Number of Bathrooms/Bedrooms

* **sqft living**: square footage of the home

* **sqft lot**: square footage of the lot

* **floors**: Total floors (levels) in house

* **waterfront**: House which has a view to a waterfront

* **view**: Has been viewed

* **condition**: How good the condition is (larger values mean better condition)

* **grade**: overall grade given to the housing unit, based on King County grading system (larger grades are better)

* **sqft above**: square footage of house apart from basement

* **sqft basement**: square footage of the basement

* **yr built**: Built Year

* **yr renovated**: Year when house was renovated

* **zipcode**: zip code

* **lat**: Latitude coordinate

* **long**: Longitude coordinate

* **sqft living15**: Living room area in 2015 (implies? some renovations) This might or might not have affected the lotsize area

* **sqft lot15**: lotSize area in 2015 (implies? some renovations)

Below it is possible to see a sample of the data:

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=FALSE}
require(dplyr)

# reading the data
df <- readxl::read_excel('../data/data_2021.xlsx')

# selecting the a sample size 5
set.seed(1992)
row_sample <- sample(x = nrow(df), size = 5, replace = FALSE)
data_sample <- df[row_sample,]

reactable(data_sample)
  
```


## Data cleaning

As we don't want to have temporal dependencies in our dataset, the very first step in order to clean it would be to remove the duplicates id overtime. So, for the repetitive ids we are going to consider only the most actual price. The code below presents this step.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=FALSE}
## removing ID duplicates
data <- df %>%
  group_by(id) %>%
  filter(date == max(date)) %>%
  ungroup()
  
```

The second step we are going to perform will be to divide our data set in train and test. The train data set will be used to the descriptive and also to train the regression models, it will contains 80% of our data. The test data set will be the remaining 20% data that we will use only to evaluate how our model will perform with unknown data.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
require(caret)

# create Data Partition
set.seed(1992)
intrain <- createDataPartition(data$price, p = 0.8, list = FALSE)

db_train <- data[intrain,]
db_test <- data[-intrain,]

```


## Basic Descriptive

In order to understand and summarize our target variable data set we are going to perform some descriptive analysis in our train data set as follows.


### Continuous Variables

Below it is presented some descriptive analysis for the continuous variables.

#### **price**

The average price is `r round(mean(db_train$price),2)` USD, the median is equal to `r round(median(db_train$price),2)` years old, the oldest player is `r round(max(db_train$price),2)` USD, the youngest player is `r round(min(db_train$price),2)` USD, and the standard deviation is `r round(sd(db_train$price),2)` USD.

Below it is represented the histogram and the density of the variable. It is possible to see that the distribution of price is asymmetric with a tail in the right.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
require(ggplot2)
require(CSGo)

avg <- round(mean(db_train$price),2)
median <- round(median(db_train$price),2)

# histogram and density
db_train %>%
  ggplot(aes(x = price)) +
  geom_histogram(
    aes(y = ..density..),
    bins = 30, 
    fill = "#509997", 
    color = "black") +
  geom_density(color = "#761954", size = 1) +
  geom_vline(
    xintercept = avg, 
    linetype = "dashed", 
    color = "#c62d64",
    size = 1.5) +
  geom_text(aes(avg, 0, label = paste("Average:", avg), hjust = -0.2, vjust = -1), color = "#c62d64") +
  geom_vline(
    xintercept = median, 
    linetype = "dotted", 
    color = "#87ca9d",
    size = 1.5) +
  geom_text(aes(median, 0, label = paste("Median:", median), hjust = 1.2, vjust = -1), color = "#87ca9d") +
  ggtitle("Distribution of player's age") +
  CSGo::theme_csgo() +
  ylab("Price (USD)") +
  xlab("Density")

```

Lets also create a normal qqplot to see if the prices fits a normal distribution. 

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=FALSE}
require(ggpubr)

# qqplot
db_train %>% 
  ggqqplot(
    x = "price",
    color = "#761954",
    ggtheme = CSGo::theme_csgo()) +
  ggtitle("Normal qqplot")

```

The normal qqplot compares the theoretical quantile from a normal distribution with the quantile from our sample data, in our case the price variable. If the price variable follows a normal distribution we expect to see most of the points above the reference line (Theoretical = Sample). However, based on the normal qqplot, we can assume that the price variable not follows a normal distribution at all.


#### **sqft_living**

The average sqft_living is `r round(mean(db_train$sqft_living),2)` USD, the median is equal to `r round(median(db_train$sqft_living),2)` years old, the oldest player is `r round(max(db_train$sqft_living),2)` USD, the youngest player is `r round(min(db_train$sqft_living),2)` USD, and the standard deviation is `r round(sd(db_train$sqft_living),2)` USD.

Below it is represented the histogram and the density of the variable. It is possible to see that the distribution of sqft_living is kind of symmetric but with some atypical values to the right.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

avg <- round(mean(db_train$sqft_living),2)
median <- round(median(db_train$sqft_living),2)

# histogram and density
db_train %>%
  ggplot(aes(x = sqft_living)) +
  geom_histogram(
    aes(y = ..density..),
    bins = 30, 
    fill = "#509997", 
    color = "black") +
  geom_density(color = "#761954", size = 1) +
  geom_vline(
    xintercept = avg, 
    linetype = "dashed", 
    color = "#c62d64",
    size = 1.5) +
  geom_text(aes(avg, 0, label = paste("Average:", avg), hjust = -0.2, vjust = -1), color = "#c62d64") +
  geom_vline(
    xintercept = median, 
    linetype = "dotted", 
    color = "#87ca9d",
    size = 1.5) +
  geom_text(aes(median, 0, label = paste("Median:", median), hjust = 1.2, vjust = -1), color = "#87ca9d") +
  ggtitle("Distribution of player's age") +
  CSGo::theme_csgo() +
  ylab("Sqft Living") +
  xlab("Density")

```


#### **sqft_lot**

The average sqft_lot is `r round(mean(db_train$sqft_lot),2)` USD, the median is equal to `r round(median(db_train$sqft_lot),2)` years old, the oldest player is `r round(max(db_train$sqft_lot),2)` USD, the youngest player is `r round(min(db_train$sqft_lot),2)` USD, and the standard deviation is `r round(sd(db_train$sqft_lot),2)` USD.

Below it is represented the histogram and the density of the variable. It is possible to see that the distribution of sqft_lot is asymmetric with some atypical values to the right.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

avg <- round(mean(db_train$sqft_lot),2)
median <- round(median(db_train$sqft_lot),2)

# histogram and density
db_train %>%
  ggplot(aes(x = sqft_lot)) +
  geom_histogram(
    aes(y = ..density..),
    bins = 30, 
    fill = "#509997", 
    color = "black") +
  geom_density(color = "#761954", size = 1) +
  geom_vline(
    xintercept = avg, 
    linetype = "dashed", 
    color = "#c62d64",
    size = 1.5) +
  geom_text(aes(avg, 0, label = paste("Average:", avg), hjust = -0.2, vjust = -1), color = "#c62d64") +
  geom_vline(
    xintercept = median, 
    linetype = "dotted", 
    color = "#87ca9d",
    size = 1.5) +
  geom_text(aes(median, 0, label = paste("Median:", median), hjust = 1.2, vjust = -1), color = "#87ca9d") +
  ggtitle("Distribution of player's age") +
  CSGo::theme_csgo() +
  ylab("Sqft Lotg") +
  xlab("Density")

```


#### **sqft_above**

The average sqft_above is `r round(mean(db_train$sqft_above),2)` USD, the median is equal to `r round(median(db_train$sqft_above),2)` years old, the oldest player is `r round(max(db_train$sqft_above),2)` USD, the youngest player is `r round(min(db_train$sqft_above),2)` USD, and the standard deviation is `r round(sd(db_train$sqft_above),2)` USD.

Below it is represented the histogram and the density of the variable. It is possible to see that the distribution of sqft_above is kind of symmetric but with some atypical values to the right.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

avg <- round(mean(db_train$sqft_above),2)
median <- round(median(db_train$sqft_above),2)

# histogram and density
db_train %>%
  ggplot(aes(x = sqft_above)) +
  geom_histogram(
    aes(y = ..density..),
    bins = 30, 
    fill = "#509997", 
    color = "black") +
  geom_density(color = "#761954", size = 1) +
  geom_vline(
    xintercept = avg, 
    linetype = "dashed", 
    color = "#c62d64",
    size = 1.5) +
  geom_text(aes(avg, 0, label = paste("Average:", avg), hjust = -0.2, vjust = -1), color = "#c62d64") +
  geom_vline(
    xintercept = median, 
    linetype = "dotted", 
    color = "#87ca9d",
    size = 1.5) +
  geom_text(aes(median, 0, label = paste("Median:", median), hjust = 1.2, vjust = -1), color = "#87ca9d") +
  ggtitle("Distribution of player's age") +
  CSGo::theme_csgo() +
  ylab("Sqft Above") +
  xlab("Density")

```




#### **sqft_basement**

The average sqft_basement is `r round(mean(db_train$sqft_basement),2)` USD, the median is equal to `r round(median(db_train$sqft_basement),2)` years old, the oldest player is `r round(max(db_train$sqft_basement),2)` USD, the youngest player is `r round(min(db_train$sqft_basement),2)` USD, and the standard deviation is `r round(sd(db_train$sqft_basement),2)` USD.

Below it is represented the histogram and the density of the variable. It is possible to see that the distribution of sqft_basement has a zero inflated, maybe it could be used as categorical variable indicating if the house has a basement or not, since we have in pour train dataset that `r round(sum(db_train$sqft_basement==0)/nrow(db_train)*100,2)`% of the houses does not have a basement and `r round(sum(db_train$sqft_basement==0)/nrow(db_train)*100,2)`% have.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

avg <- round(mean(db_train$sqft_basement),2)
median <- round(median(db_train$sqft_basement),2)

# histogram and density
db_train %>%
  ggplot(aes(x = sqft_basement)) +
  geom_histogram(
    aes(y = ..density..),
    bins = 30, 
    fill = "#509997", 
    color = "black") +
  geom_density(color = "#761954", size = 1) +
  geom_vline(
    xintercept = avg, 
    linetype = "dashed", 
    color = "#c62d64",
    size = 1.5) +
  geom_text(aes(avg, 0, label = paste("Average:", avg), hjust = -0.2, vjust = -1), color = "#c62d64") +
  geom_vline(
    xintercept = median, 
    linetype = "dotted", 
    color = "#87ca9d",
    size = 1.5) +
  geom_text(aes(median, 0, label = paste("Median:", median), hjust = 1.2, vjust = -1), color = "#87ca9d") +
  ggtitle("Distribution of player's age") +
  CSGo::theme_csgo() +
  ylab("Sqft Basement") +
  xlab("Density")

```



### Categorical Variables

Below it is presented some descriptive analysis for the categorical variables against our target variable price.

#### **bedrooms**

First let's take a look in the frequency table bellow.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# freq table
table(db_train$bedrooms)

```

> Based on the table above we have decided to joing the more than 8 in the same category. 

Below is presented the boxplot of price by bedrooms.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

db_train <- db_train %>%
  mutate(
    bedrooms_cat = ifelse(bedrooms >=8, "more than 8", as.factor(bedrooms))
  )

# bar plot
db_train %>%
  ggplot(aes(x = bedrooms_cat, y = price, fill = bedrooms_cat)) +
  geom_boxplot(color = "black") +
  ggtitle("Price by Number of bedrooms") +
  ylab("Price") +
  xlab("Number of bedrooms") +
  labs(fill = "Number of bedrooms") +
  CSGo::scale_fill_csgo()+
  CSGo::theme_csgo()
 

```

> The boxplot shows that the bigger the number of bedrooms bigger the price.



#### **bathrooms**

First let's take a look in the frequency table bellow.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# freq table
table(db_train$bathrooms)

```

> Based on the table above we have decided to joing the more than 4 in the same category and less than 1 in other category.

Below is presented the boxplot of price by bathrooms

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

db_train <- db_train %>%
  mutate(
    bathrooms = as.numeric(bathrooms),
    
    bathrooms_cat = as.factor(case_when(
      bathrooms >= 4 ~ "more than 4",
      bathrooms < 1 ~ "0 less than 1",
      TRUE ~ as.character(bathrooms))
  ))

# bar plot
db_train %>%
  ggplot(aes(x = bathrooms_cat, y = price, fill = bathrooms_cat)) +
  geom_boxplot(color = "black") +
  ggtitle("Price by Number of bathrooms") +
  ylab("Price") +
  xlab("Number of bathrooms") +
  labs(fill = "Number of bathrooms") +
  CSGo::scale_fill_csgo()+
  CSGo::theme_csgo()
 

```

> The boxplot shows that the bigger the number of bathrooms bigger the price.



#### **floors**

First let's take a look in the frequency table bellow.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# freq table
table(db_train$floors)

```

> Based on the table above we have decided to joing the more than 2 in the same category.

Below is presented the boxplot of price by floors

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

db_train <- db_train %>%
  mutate(
   floors_cat = as.factor(case_when(
      floors >= 2 ~ "more than 2",
      TRUE ~ as.character(floors))
  ))

# bar plot
db_train %>%
  ggplot(aes(x = floors_cat, y = price, fill = floors_cat)) +
  geom_boxplot(color = "black") +
  ggtitle("Price by Number of floors") +
  ylab("Price") +
  xlab("Number of floors") +
  labs(fill = "Number of floors") +
  CSGo::scale_fill_csgo()+
  CSGo::theme_csgo()
 

```

> The boxplot shows that the number of floors does not influential in the price.



#### **waterfront**

First let's take a look in the frequency table bellow.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# freq table
table(db_train$waterfront)

```

> Based on the table above can see that we have very unbalanced classes for the waterfront variable. The most of the data is FALSE. However the boxplot bellow suggests that when the waterfront is TRUE the price of the houses are bigger.

Below is presented the boxplot of price by waterfront.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

# bar plot
db_train %>%
  ggplot(aes(x = waterfront, y = price, fill = waterfront)) +
  geom_boxplot(color = "black") +
  ggtitle("Price by waterfront") +
  ylab("Price") +
  xlab("waterfronts") +
  labs(fill = "waterfront") +
  CSGo::scale_fill_csgo()+
  CSGo::theme_csgo()
 


```

> The boxplot shows when the waterfront is TRUE the higher will be the prices.



#### **view**

First let's take a look in the frequency table bellow.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# freq table
table(db_train$view)

```

Below is presented the boxplot of price by view.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
db_train <- db_train %>%
  mutate(
   view = as.factor(view)
  )

# bar plot
db_train %>%
  ggplot(aes(x = view, y = price, fill = view)) +
  geom_boxplot(color = "black") +
  ggtitle("Price by view") +
  ylab("Price") +
  xlab("view") +
  labs(fill = "view") +
  CSGo::scale_fill_csgo()+
  CSGo::theme_csgo()
 



```

> The boxplot shows that bigger the view bigger the price.



#### **condition**

First let's take a look in the frequency table bellow.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# freq table
table(db_train$condition)

```

> Based on the table above we decided to joing the categories 1 and 2 into the same category.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
db_train <- db_train %>%
  mutate(
   condition_cat = ifelse(as.numeric(condition) <= 2, "less than 2", as.factor(condition))
  )

# bar plot
db_train %>%
  ggplot(aes(x = condition_cat, y = price, fill = condition_cat)) +
  geom_boxplot(color = "black") +
  ggtitle("Price by condition") +
  ylab("Price") +
  xlab("condition") +
  labs(fill = "condition") +
  CSGo::scale_fill_csgo()+
  CSGo::theme_csgo()
 



```

> The boxplot shows that the condition has no influential in the price.



#### **grade**

First let's take a look in the frequency table bellow.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# freq table
table(db_train$grade)

```

> Based on the table above we decided to joing the categories 3, 4 and 5 into the same category and the 11, 12, 13 in other category.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
db_train <- db_train %>%
  mutate(
    grade = as.numeric(grade),
    
    grade_cat = as.factor(case_when(
      grade <= 5 ~ "less than 5",
      grade >= 11 ~ "mores than 11",
      TRUE ~ as.character(grade))
  ))

# bar plot
db_train %>%
  ggplot(aes(x = as.factor(grade_cat), y = price, fill = as.factor(grade_cat))) +
  geom_boxplot(color = "black") +
  ggtitle("Price by grade") +
  ylab("Price") +
  xlab("grade") +
  labs(fill = "grade") +
  CSGo::scale_fill_csgo()+
  CSGo::theme_csgo()
 



```

> The boxplot shows that bigger the grades bigger the price.

### Correlation

Now we are going to perform a correlation study to see if the are any continuous explanatory variables are related to each other and also the most correlated variables with the price.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
require(corrplot)

db_train_contin <- db_train %>%
  select(
    price,
    sqft_living,
    sqft_lot,
    sqft_above,
    sqft_basement
  )

cor_result <- cor(db_train_contin, method = "pearson")

corrplot::corrplot.mixed(cor_result)


```

> It is possible to see that sqft_living and sqft_above presented a high correlation (0.88), so to avoid multicolinearty problems we will not consider the sqft_above in our model, this choice is also based on that the sqft_living has the higher correlation to our target variable (price) compared to sqft_above.



# Modelling

In this session we will train a linear regression to predict our target variable *price*. We will also run a step wise selection.

Let's first define our start formula. We will not consider the following variables: sqft_above, condition, and floors.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# formula
form <- formula(price ~ sqft_living + sqft_basement + sqft_lot + grade_cat + view + waterfront + bathrooms_cat + bedrooms_cat)

```

Now let's train the model.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}
# model
#lmStepAIC
set.seed(1992)
mod <- train(
  form,
  data = db_train, 
  method = "lmStepAIC")

summary(mod)


```

So, the final model will be:

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

mod$finalModel

```

And below is presented the results of this model:

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

mod$results

```

# Model Evaluation

In this session we are going to apply the model above in our test data set to see how it performs in a new data set.

First let's transform some categories we created before in our test data set, and then apply our model to it.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

db_test <- db_test %>%
  mutate(
    bedrooms_cat = ifelse(bedrooms >=8, "more than 8", as.factor(bedrooms)),
    
    bathrooms = as.numeric(bathrooms),
    
    view = as.factor(view),
    
    bathrooms_cat = as.factor(case_when(
      bathrooms >= 4 ~ "more than 4",
      bathrooms < 1 ~ "0 less than 1",
      TRUE ~ as.character(bathrooms))
    ),
    
    grade = as.numeric(grade),
    
    grade_cat = as.factor(case_when(
      grade <= 5 ~ "less than 5",
      grade >= 11 ~ "mores than 11",
      TRUE ~ as.character(grade))
    )
  )

db_test <- db_test %>%
  mutate(
    pred = predict(mod, db_test)
  )

```

Now let's plot the predicted vs observed.

```{r, eval=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE}

db_test %>% ggplot(aes(x = price, y = pred)) +
  geom_point() +
  CSGo::theme_csgo()

```


# Conclusion 

The model developed to predict the price was considered satisfactory. However the use and understanding of new variables or transformation would improve our results.

